{"uid":"1182b3a4772c513d","name":"test_scd_StoT_validation","fullName":"tests.test_smoke_suite#test_scd_StoT_validation","historyId":"bf85cd6cfc598fc1d8ac503062e75c93","time":{"start":1756758960743,"stop":1756758960784,"duration":41},"status":"failed","statusMessage":"AssertionError: ❌ Data completeness check failed for stage_doctors ↔ target_doctors. Missing rows = 1","statusTrace":"stage_db = <utils.db_helper.DBHelper object at 0x0000022C5E5E20D0>\ntarget_db = <utils.db_helper.DBHelper object at 0x0000022C5E499B50>\nreport_helper = <utils.report_helper.ReportHelper object at 0x0000022C5E5007C0>\n\n    @pytest.mark.skipif(not should_run(\"scd_validation_cross_env_StageToTarget\"), reason=\"Marked N in Excel\")\n    def test_scd_StoT_validation(stage_db, target_db, report_helper):\n        validator = SCD_Validation_StageToTarget()\n>       validator.run(stage_db, target_db, report_helper)\n\ntests\\test_smoke_suite.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.scd_validation_cross_env.SCD_Validation_StageToTarget object at 0x0000022C5E2F7620>\nstage_db = <utils.db_helper.DBHelper object at 0x0000022C5E5E20D0>\ntarget_db = <utils.db_helper.DBHelper object at 0x0000022C5E499B50>\nreport_helper = <utils.report_helper.ReportHelper object at 0x0000022C5E5007C0>\n\n    def run(self,stage_db, target_db, report_helper):\n        df = pd.read_excel(self.excel_path, sheet_name=\"Table_Mapping\")\n    \n        results = []\n        failed_checks = []  # track failures\n    \n        for _, row in df.iterrows():\n            stage_table = row[\"stage_table\"]\n            target_table = row[\"target_table\"]\n    \n            common_columns = self.get_common_columns(stage_db, target_db,stage_table, target_table)\n            print(f\"Common columns for {stage_table} ↔ {target_table}: {common_columns}\")\n    \n            if not common_columns:\n                logging.warning(f\"No common columns found for {stage_table} ↔ {target_table}\")\n                continue\n    \n            # ✅ Added IS_Current=1 filters for both Stage & Target DB\n            SCD_query = f\"\"\"\n                SELECT COUNT(*) AS Missing_Count\n                FROM (\n                    SELECT {common_columns}\n                    FROM {self.config.get(\"STAGEDB\", \"database\")}.dbo.{stage_table}\n                    WHERE Is_Current='TRUE' OR Is_Current='1'\n                    EXCEPT\n                    SELECT {common_columns}\n                    FROM {self.config.get(\"TARGETDB\", \"database\")}.dbo.{target_table}\n                    WHERE Is_Current='TRUE' OR Is_Current='1'\n                ) AS diff\n            \"\"\"\n    \n            logging.info(f\"Running SCD check: {stage_table} → {target_table}\")\n            raw_result = stage_db.execute_query(SCD_query)\n    \n            missing_count = raw_result[0][0] if raw_result else 0\n            is_check_passed = missing_count == 0\n    \n            results.append({\n                \"Stage_DB\": self.config.get(\"STAGEDB\", \"database\"),\n                \"Stage_Table\": stage_table,\n                \"Target_DB\": self.config.get(\"TARGETDB\", \"database\"),\n                \"Target_Table\": target_table,\n                \"Common_Columns\": common_columns,\n                \"Data_Missing_Count\": missing_count,\n                \"IsCheckPassed\": is_check_passed\n            })\n    \n            if not is_check_passed:\n                failed_checks.append(f\"❌ Data completeness check failed for {stage_table} ↔ {target_table}. Missing rows = {missing_count}\")\n            # assert is_check_passed, f\"❌ SCD check failed for {stage_table} ↔ {target_table}\"\n    \n        # ✅ Save & print report\n        report_helper.save_report(results, test_type=\"SCD_Data_Check_Stage_to_Target\")\n        # report_helper.print_validation_report_Stage_to_Target(results)\n    \n        # ✅ Fail test only at the end (after report generation)\n>       assert not failed_checks, \"\\n\".join(failed_checks)\n               ^^^^^^^^^^^^^^^^^\nE       AssertionError: ❌ Data completeness check failed for stage_doctors ↔ target_doctors. Missing rows = 1\n\nsrc\\scd_validation_cross_env.py:200: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"stage_db","time":{"start":1756758960739,"stop":1756758960740,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"target_db","time":{"start":1756758960740,"stop":1756758960741,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"report_helper","time":{"start":1756758960742,"stop":1756758960742,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: ❌ Data completeness check failed for stage_doctors ↔ target_doctors. Missing rows = 1","statusTrace":"stage_db = <utils.db_helper.DBHelper object at 0x0000022C5E5E20D0>\ntarget_db = <utils.db_helper.DBHelper object at 0x0000022C5E499B50>\nreport_helper = <utils.report_helper.ReportHelper object at 0x0000022C5E5007C0>\n\n    @pytest.mark.skipif(not should_run(\"scd_validation_cross_env_StageToTarget\"), reason=\"Marked N in Excel\")\n    def test_scd_StoT_validation(stage_db, target_db, report_helper):\n        validator = SCD_Validation_StageToTarget()\n>       validator.run(stage_db, target_db, report_helper)\n\ntests\\test_smoke_suite.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.scd_validation_cross_env.SCD_Validation_StageToTarget object at 0x0000022C5E2F7620>\nstage_db = <utils.db_helper.DBHelper object at 0x0000022C5E5E20D0>\ntarget_db = <utils.db_helper.DBHelper object at 0x0000022C5E499B50>\nreport_helper = <utils.report_helper.ReportHelper object at 0x0000022C5E5007C0>\n\n    def run(self,stage_db, target_db, report_helper):\n        df = pd.read_excel(self.excel_path, sheet_name=\"Table_Mapping\")\n    \n        results = []\n        failed_checks = []  # track failures\n    \n        for _, row in df.iterrows():\n            stage_table = row[\"stage_table\"]\n            target_table = row[\"target_table\"]\n    \n            common_columns = self.get_common_columns(stage_db, target_db,stage_table, target_table)\n            print(f\"Common columns for {stage_table} ↔ {target_table}: {common_columns}\")\n    \n            if not common_columns:\n                logging.warning(f\"No common columns found for {stage_table} ↔ {target_table}\")\n                continue\n    \n            # ✅ Added IS_Current=1 filters for both Stage & Target DB\n            SCD_query = f\"\"\"\n                SELECT COUNT(*) AS Missing_Count\n                FROM (\n                    SELECT {common_columns}\n                    FROM {self.config.get(\"STAGEDB\", \"database\")}.dbo.{stage_table}\n                    WHERE Is_Current='TRUE' OR Is_Current='1'\n                    EXCEPT\n                    SELECT {common_columns}\n                    FROM {self.config.get(\"TARGETDB\", \"database\")}.dbo.{target_table}\n                    WHERE Is_Current='TRUE' OR Is_Current='1'\n                ) AS diff\n            \"\"\"\n    \n            logging.info(f\"Running SCD check: {stage_table} → {target_table}\")\n            raw_result = stage_db.execute_query(SCD_query)\n    \n            missing_count = raw_result[0][0] if raw_result else 0\n            is_check_passed = missing_count == 0\n    \n            results.append({\n                \"Stage_DB\": self.config.get(\"STAGEDB\", \"database\"),\n                \"Stage_Table\": stage_table,\n                \"Target_DB\": self.config.get(\"TARGETDB\", \"database\"),\n                \"Target_Table\": target_table,\n                \"Common_Columns\": common_columns,\n                \"Data_Missing_Count\": missing_count,\n                \"IsCheckPassed\": is_check_passed\n            })\n    \n            if not is_check_passed:\n                failed_checks.append(f\"❌ Data completeness check failed for {stage_table} ↔ {target_table}. Missing rows = {missing_count}\")\n            # assert is_check_passed, f\"❌ SCD check failed for {stage_table} ↔ {target_table}\"\n    \n        # ✅ Save & print report\n        report_helper.save_report(results, test_type=\"SCD_Data_Check_Stage_to_Target\")\n        # report_helper.print_validation_report_Stage_to_Target(results)\n    \n        # ✅ Fail test only at the end (after report generation)\n>       assert not failed_checks, \"\\n\".join(failed_checks)\n               ^^^^^^^^^^^^^^^^^\nE       AssertionError: ❌ Data completeness check failed for stage_doctors ↔ target_doctors. Missing rows = 1\n\nsrc\\scd_validation_cross_env.py:200: AssertionError","steps":[],"attachments":[{"uid":"dfc5b8d3fe9b43a3","name":"stdout","source":"dfc5b8d3fe9b43a3.txt","type":"text/plain","size":526}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[{"name":"target_db::0","time":{"start":1756758960796,"stop":1756758960796,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"stage_db::0","time":{"start":1756758960797,"stop":1756758960797,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_smoke_suite"},{"name":"host","value":"INATS-LTP-066"},{"name":"thread","value":"37384-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_smoke_suite"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"1182b3a4772c513d.json","parameterValues":[]}