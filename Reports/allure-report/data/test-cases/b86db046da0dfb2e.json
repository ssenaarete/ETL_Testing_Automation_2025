{"uid":"b86db046da0dfb2e","name":"test_Datatype_constraint_validation","fullName":"tests.test_smoke_suite#test_Datatype_constraint_validation","historyId":"ca22211244849dd38df6eb296cdbfe8f","time":{"start":1759840889210,"stop":1759840890150,"duration":940},"status":"failed","statusMessage":"AssertionError: ❌ Columns missing in DB: [{'Table_Excel': 'source_patients', 'Column_Excel': 'address', 'DataType_Excel': 'VARCHAR', 'Constraint_Excel': {'NULL'}, 'DataType_DB': 'N/A', 'Constraint_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}]","statusTrace":"config_loader = <utils.config_loader.ConfigLoader object at 0x000002177ECFEBA0>\n\n    @pytest.mark.skipif(not should_run(\"datatype_constraints_validation\"), reason=\"Marked N in Excel\")\n    def test_Datatype_constraint_validation(config_loader):\n        validator = DataTypeValidation(config_loader)\n>       validator.run()\n\ntests\\test_smoke_suite.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.Datatype_constraint_validation.DataTypeValidation object at 0x000002177E6BB230>\n\n    def run(self):\n        df = self.df.copy()\n    \n        results = []\n    \n        for _, row in df.iterrows():\n            table = row[\"table_name\"]\n            column = row[\"column_name\"]\n            expected_dtype = str(row[\"Data_Type\"]).strip().upper()\n            # expected_constraint = str(row[\"Constraints\"]).strip().upper()\n    \n            # ✅ Handle NaN or blank constraint values as NULL\n            # expected_constraint = row[\"Constraints\"]\n            # if pd.isna(expected_constraint) or str(expected_constraint).strip() == \"\":\n            #     expected_constraint = \"NULL\"\n            # else:\n            #     expected_constraint = str(expected_constraint).strip().upper()\n        #___________________________________________________________________________\n            # \uD83D\uDD39 Normalize Excel constraints (covers blank, single, multiple)\n            expected_constraints = self._normalize_constraints(row.get(\"Constraints\"), source=\"Excel\")\n    \n        #___________________________________________________________________________\n    \n            db_meta = self.get_db_metadata(table)\n            db_cols = [col[\"COLUMN_NAME\"] for col in db_meta]\n    \n            if column not in db_cols:\n                results.append({\n                    \"Table_Excel\": table,\n                    \"Column_Excel\": column,\n                    \"DataType_Excel\": expected_dtype,\n                    \"Constraint_Excel\": expected_constraints,\n                    \"DataType_DB\": \"N/A\",\n                    \"Constraint_DB\": \"N/A\",\n                    \"Status\": \"Mismatch (Column Missing in DB)\"\n                })\n                continue\n    \n            # get db column details\n            db_col = next(c for c in db_meta if c[\"COLUMN_NAME\"] == column)\n            db_dtype = db_col[\"DATA_TYPE\"].upper()\n            # db_constraint = db_col[\"CONSTRAINTS\"].upper() if db_col[\"CONSTRAINTS\"] else \"NULL\"\n            db_constraints = self._normalize_constraints(db_col.get(\"CONSTRAINTS\"), source=\"DB\")\n    \n            # compare\n            dtype_match = (db_dtype == expected_dtype)\n            # constraint_match = (db_constraint == expected_constraint)\n            constraint_match = (db_constraints == expected_constraints)\n    \n            status_1 = \"✅ Matched\" if (dtype_match) else \"❌ Mismatch\"\n            status_2 = \"✅ Matched\" if (constraint_match) else \"❌ Mismatch\"\n    \n            results.append({\n                \"Database\": self.db.database,\n                \"Table_Excel\": table,\n                \"Column_Excel\": column,\n                \"DataType_Excel\": expected_dtype,\n                \"DataType_DB\": db_dtype,\n                \"DataType_Status\": status_1,\n                \"Constraint_Excel\": expected_constraints,\n                \"Constraint_DB\": db_constraints,\n                \"Constraint_Status\": status_2\n            })\n    \n        # Save + print\n        self.report_helper.save_report(results, test_type=\"DataType_Constraints_Validation\")\n        # self.report_helper.print_validation_report_DataType_Constraints_Validation(results, check_type=\"DataType_Constraints_Validation\")\n    \n        # ✅ Assertions\n        assert results, \"❌ Validation returned no results — check Excel sheet or DB connection.\"\n    \n        missing_columns = [r for r in results if \"Missing\" in r.get(\"Status\", \"\")]\n>       assert not missing_columns, f\"❌ Columns missing in DB: {missing_columns}\"\n               ^^^^^^^^^^^^^^^^^^^\nE       AssertionError: ❌ Columns missing in DB: [{'Table_Excel': 'source_patients', 'Column_Excel': 'address', 'DataType_Excel': 'VARCHAR', 'Constraint_Excel': {'NULL'}, 'DataType_DB': 'N/A', 'Constraint_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}]\n\nsrc\\Datatype_constraint_validation.py:163: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1759840862031,"stop":1759840862212,"duration":181},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"config_loader","time":{"start":1759840889174,"stop":1759840889209,"duration":35},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: ❌ Columns missing in DB: [{'Table_Excel': 'source_patients', 'Column_Excel': 'address', 'DataType_Excel': 'VARCHAR', 'Constraint_Excel': {'NULL'}, 'DataType_DB': 'N/A', 'Constraint_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}]","statusTrace":"config_loader = <utils.config_loader.ConfigLoader object at 0x000002177ECFEBA0>\n\n    @pytest.mark.skipif(not should_run(\"datatype_constraints_validation\"), reason=\"Marked N in Excel\")\n    def test_Datatype_constraint_validation(config_loader):\n        validator = DataTypeValidation(config_loader)\n>       validator.run()\n\ntests\\test_smoke_suite.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.Datatype_constraint_validation.DataTypeValidation object at 0x000002177E6BB230>\n\n    def run(self):\n        df = self.df.copy()\n    \n        results = []\n    \n        for _, row in df.iterrows():\n            table = row[\"table_name\"]\n            column = row[\"column_name\"]\n            expected_dtype = str(row[\"Data_Type\"]).strip().upper()\n            # expected_constraint = str(row[\"Constraints\"]).strip().upper()\n    \n            # ✅ Handle NaN or blank constraint values as NULL\n            # expected_constraint = row[\"Constraints\"]\n            # if pd.isna(expected_constraint) or str(expected_constraint).strip() == \"\":\n            #     expected_constraint = \"NULL\"\n            # else:\n            #     expected_constraint = str(expected_constraint).strip().upper()\n        #___________________________________________________________________________\n            # \uD83D\uDD39 Normalize Excel constraints (covers blank, single, multiple)\n            expected_constraints = self._normalize_constraints(row.get(\"Constraints\"), source=\"Excel\")\n    \n        #___________________________________________________________________________\n    \n            db_meta = self.get_db_metadata(table)\n            db_cols = [col[\"COLUMN_NAME\"] for col in db_meta]\n    \n            if column not in db_cols:\n                results.append({\n                    \"Table_Excel\": table,\n                    \"Column_Excel\": column,\n                    \"DataType_Excel\": expected_dtype,\n                    \"Constraint_Excel\": expected_constraints,\n                    \"DataType_DB\": \"N/A\",\n                    \"Constraint_DB\": \"N/A\",\n                    \"Status\": \"Mismatch (Column Missing in DB)\"\n                })\n                continue\n    \n            # get db column details\n            db_col = next(c for c in db_meta if c[\"COLUMN_NAME\"] == column)\n            db_dtype = db_col[\"DATA_TYPE\"].upper()\n            # db_constraint = db_col[\"CONSTRAINTS\"].upper() if db_col[\"CONSTRAINTS\"] else \"NULL\"\n            db_constraints = self._normalize_constraints(db_col.get(\"CONSTRAINTS\"), source=\"DB\")\n    \n            # compare\n            dtype_match = (db_dtype == expected_dtype)\n            # constraint_match = (db_constraint == expected_constraint)\n            constraint_match = (db_constraints == expected_constraints)\n    \n            status_1 = \"✅ Matched\" if (dtype_match) else \"❌ Mismatch\"\n            status_2 = \"✅ Matched\" if (constraint_match) else \"❌ Mismatch\"\n    \n            results.append({\n                \"Database\": self.db.database,\n                \"Table_Excel\": table,\n                \"Column_Excel\": column,\n                \"DataType_Excel\": expected_dtype,\n                \"DataType_DB\": db_dtype,\n                \"DataType_Status\": status_1,\n                \"Constraint_Excel\": expected_constraints,\n                \"Constraint_DB\": db_constraints,\n                \"Constraint_Status\": status_2\n            })\n    \n        # Save + print\n        self.report_helper.save_report(results, test_type=\"DataType_Constraints_Validation\")\n        # self.report_helper.print_validation_report_DataType_Constraints_Validation(results, check_type=\"DataType_Constraints_Validation\")\n    \n        # ✅ Assertions\n        assert results, \"❌ Validation returned no results — check Excel sheet or DB connection.\"\n    \n        missing_columns = [r for r in results if \"Missing\" in r.get(\"Status\", \"\")]\n>       assert not missing_columns, f\"❌ Columns missing in DB: {missing_columns}\"\n               ^^^^^^^^^^^^^^^^^^^\nE       AssertionError: ❌ Columns missing in DB: [{'Table_Excel': 'source_patients', 'Column_Excel': 'address', 'DataType_Excel': 'VARCHAR', 'Constraint_Excel': {'NULL'}, 'DataType_DB': 'N/A', 'Constraint_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}]\n\nsrc\\Datatype_constraint_validation.py:163: AssertionError","steps":[],"attachments":[{"uid":"bfef43eb841de4d8","name":"log","source":"bfef43eb841de4d8.txt","type":"text/plain","size":484},{"uid":"a4bcba294cb16817","name":"stdout","source":"a4bcba294cb16817.txt","type":"text/plain","size":252}],"parameters":[],"attachmentStep":false,"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_smoke_suite"},{"name":"host","value":"INATS-LTP-066"},{"name":"thread","value":"33804-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_smoke_suite"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"b86db046da0dfb2e.json","parameterValues":[]}