{"uid":"b34bc194c4e6d06","name":"test_check_column_order_validation","fullName":"tests.test_smoke_suite#test_check_column_order_validation","historyId":"b527589c4a7db1808e096468ef2366a9","time":{"start":1759841959911,"stop":1759841960132,"duration":221},"status":"failed","statusMessage":"AssertionError: Mismatch in source_doctors vs target_doctors\nMismatch in source_patients vs target_patients","statusTrace":"source_db = <utils.db_helper.DBHelper object at 0x000002906158A620>\ntarget_db = <utils.db_helper.DBHelper object at 0x0000029050721310>\nreport_helper = <utils.report_helper.ReportHelper object at 0x00000290616BDE50>\n\n    @pytest.mark.skipif(not should_run(\"Check_Column_order\"), reason=\"Marked N in Excel\")\n    def test_check_column_order_validation(source_db, target_db, report_helper):\n        validator = ColumnNameValidation()\n>       validator.run(source_db, target_db, report_helper)\n\ntests\\test_smoke_suite.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.Check_column_order.ColumnNameValidation object at 0x00000290611482F0>\nsource_db = <utils.db_helper.DBHelper object at 0x000002906158A620>\ntarget_db = <utils.db_helper.DBHelper object at 0x0000029050721310>\nreport_helper = <utils.report_helper.ReportHelper object at 0x00000290616BDE50>, schema = 'dbo'\n\n    def run(self, source_db, target_db, report_helper, schema=\"dbo\"):\n        df = pd.read_excel(self.excel_path, sheet_name=\"Table_Mapping\")\n    \n        results = []\n        failed_checks = []\n    \n        for _, row in df.iterrows():\n            source_table = str(row[\"source_table\"]).strip()\n            target_table = str(row[\"target_table\"]).strip()\n    \n            if not source_table or not target_table:\n                logging.warning(\"⚠ Skipping row with missing source/target table mapping\")\n                continue\n    \n            # Fetch columns from Source\n            src_cols = source_db.execute_query(f\"\"\"\n                SELECT COLUMN_NAME\n                FROM INFORMATION_SCHEMA.COLUMNS\n                WHERE TABLE_SCHEMA = '{schema}' AND TABLE_NAME = '{source_table}'\n                ORDER BY ORDINAL_POSITION\n            \"\"\")\n    \n            # Fetch columns from Target\n            tgt_cols = target_db.execute_query(f\"\"\"\n                SELECT COLUMN_NAME\n                FROM INFORMATION_SCHEMA.COLUMNS\n                WHERE TABLE_SCHEMA = '{schema}' AND TABLE_NAME = '{target_table}'\n                ORDER BY ORDINAL_POSITION\n            \"\"\")\n    \n            src_cols = [r[0] for r in src_cols] if src_cols else []\n            tgt_cols = [r[0] for r in tgt_cols] if tgt_cols else []\n    \n            # Compare (case-insensitive)\n            missing_in_target = [c for c in src_cols if c.lower() not in [t.lower() for t in tgt_cols]]\n            missing_in_source = [c for c in tgt_cols if c.lower() not in [s.lower() for s in src_cols]]\n    \n            invalid_count = len(missing_in_target) + len(missing_in_source)\n    \n            details = pd.DataFrame({\n                \"Missing_in_Source_aginst_Target\": [\", \".join(missing_in_source)] if missing_in_source else [\"\"],\n                \"Missing_in_Target_aginst_Source\": [\", \".join(missing_in_target)] if missing_in_target else [\"\"],\n                \"Source_Columns\": [\", \".join(src_cols)],\n                \"Target_Columns\": [\", \".join(tgt_cols)]\n            })\n    \n            status = \"✅ PASS\" if invalid_count == 0 else \"❌ FAIL\"\n    \n            results.append({\n                \"Source_Table\": source_table,\n                \"Target_Table\": target_table,\n                \"Invalid_Count\": invalid_count,\n                \"Status\": status,\n                \"Details\": details if invalid_count > 0 else None\n            })\n    \n            if invalid_count > 0:\n                failed_checks.append(f\"Mismatch in {source_table} vs {target_table}\")\n    \n            logging.info(\n                f\"Column Name Check {source_table} ↔ {target_table} | \"\n                f\"Invalid={invalid_count} | Status={status}\"\n            )\n    \n        # ✅ Save report\n        report_file = report_helper.save_report(results, test_type=\"Column_Name_Check\")\n    \n        # ✅ Excel Output (summary + details per mapping)\n        summary_df = pd.DataFrame(results).drop(columns=[\"Details\"], errors=\"ignore\")\n        with pd.ExcelWriter(report_file, engine=\"openpyxl\", mode=\"w\") as writer:\n            summary_df.to_excel(writer, sheet_name=\"Summary\", index=False)\n    \n            for r in results:\n                if r.get(\"Invalid_Count\", 0) > 0 and r.get(\"Details\") is not None:\n                    details_df = r[\"Details\"]\n                    if not details_df.empty:\n                        sheet_name = f\"{r['Source_Table']}_ColCheck\"[:31]\n                        details_df.to_excel(writer, sheet_name=sheet_name, index=False)\n    \n        # ✅ Fail test at the end\n>       assert not failed_checks, \"\\n\".join(failed_checks)\n               ^^^^^^^^^^^^^^^^^\nE       AssertionError: Mismatch in source_doctors vs target_doctors\nE       Mismatch in source_patients vs target_patients\n\nsrc\\Check_column_order.py:94: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1759841034556,"stop":1759841034690,"duration":134},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"source_db","time":{"start":1759841959907,"stop":1759841959908,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"target_db","time":{"start":1759841959908,"stop":1759841959910,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"report_helper","time":{"start":1759841959910,"stop":1759841959910,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Mismatch in source_doctors vs target_doctors\nMismatch in source_patients vs target_patients","statusTrace":"source_db = <utils.db_helper.DBHelper object at 0x000002906158A620>\ntarget_db = <utils.db_helper.DBHelper object at 0x0000029050721310>\nreport_helper = <utils.report_helper.ReportHelper object at 0x00000290616BDE50>\n\n    @pytest.mark.skipif(not should_run(\"Check_Column_order\"), reason=\"Marked N in Excel\")\n    def test_check_column_order_validation(source_db, target_db, report_helper):\n        validator = ColumnNameValidation()\n>       validator.run(source_db, target_db, report_helper)\n\ntests\\test_smoke_suite.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.Check_column_order.ColumnNameValidation object at 0x00000290611482F0>\nsource_db = <utils.db_helper.DBHelper object at 0x000002906158A620>\ntarget_db = <utils.db_helper.DBHelper object at 0x0000029050721310>\nreport_helper = <utils.report_helper.ReportHelper object at 0x00000290616BDE50>, schema = 'dbo'\n\n    def run(self, source_db, target_db, report_helper, schema=\"dbo\"):\n        df = pd.read_excel(self.excel_path, sheet_name=\"Table_Mapping\")\n    \n        results = []\n        failed_checks = []\n    \n        for _, row in df.iterrows():\n            source_table = str(row[\"source_table\"]).strip()\n            target_table = str(row[\"target_table\"]).strip()\n    \n            if not source_table or not target_table:\n                logging.warning(\"⚠ Skipping row with missing source/target table mapping\")\n                continue\n    \n            # Fetch columns from Source\n            src_cols = source_db.execute_query(f\"\"\"\n                SELECT COLUMN_NAME\n                FROM INFORMATION_SCHEMA.COLUMNS\n                WHERE TABLE_SCHEMA = '{schema}' AND TABLE_NAME = '{source_table}'\n                ORDER BY ORDINAL_POSITION\n            \"\"\")\n    \n            # Fetch columns from Target\n            tgt_cols = target_db.execute_query(f\"\"\"\n                SELECT COLUMN_NAME\n                FROM INFORMATION_SCHEMA.COLUMNS\n                WHERE TABLE_SCHEMA = '{schema}' AND TABLE_NAME = '{target_table}'\n                ORDER BY ORDINAL_POSITION\n            \"\"\")\n    \n            src_cols = [r[0] for r in src_cols] if src_cols else []\n            tgt_cols = [r[0] for r in tgt_cols] if tgt_cols else []\n    \n            # Compare (case-insensitive)\n            missing_in_target = [c for c in src_cols if c.lower() not in [t.lower() for t in tgt_cols]]\n            missing_in_source = [c for c in tgt_cols if c.lower() not in [s.lower() for s in src_cols]]\n    \n            invalid_count = len(missing_in_target) + len(missing_in_source)\n    \n            details = pd.DataFrame({\n                \"Missing_in_Source_aginst_Target\": [\", \".join(missing_in_source)] if missing_in_source else [\"\"],\n                \"Missing_in_Target_aginst_Source\": [\", \".join(missing_in_target)] if missing_in_target else [\"\"],\n                \"Source_Columns\": [\", \".join(src_cols)],\n                \"Target_Columns\": [\", \".join(tgt_cols)]\n            })\n    \n            status = \"✅ PASS\" if invalid_count == 0 else \"❌ FAIL\"\n    \n            results.append({\n                \"Source_Table\": source_table,\n                \"Target_Table\": target_table,\n                \"Invalid_Count\": invalid_count,\n                \"Status\": status,\n                \"Details\": details if invalid_count > 0 else None\n            })\n    \n            if invalid_count > 0:\n                failed_checks.append(f\"Mismatch in {source_table} vs {target_table}\")\n    \n            logging.info(\n                f\"Column Name Check {source_table} ↔ {target_table} | \"\n                f\"Invalid={invalid_count} | Status={status}\"\n            )\n    \n        # ✅ Save report\n        report_file = report_helper.save_report(results, test_type=\"Column_Name_Check\")\n    \n        # ✅ Excel Output (summary + details per mapping)\n        summary_df = pd.DataFrame(results).drop(columns=[\"Details\"], errors=\"ignore\")\n        with pd.ExcelWriter(report_file, engine=\"openpyxl\", mode=\"w\") as writer:\n            summary_df.to_excel(writer, sheet_name=\"Summary\", index=False)\n    \n            for r in results:\n                if r.get(\"Invalid_Count\", 0) > 0 and r.get(\"Details\") is not None:\n                    details_df = r[\"Details\"]\n                    if not details_df.empty:\n                        sheet_name = f\"{r['Source_Table']}_ColCheck\"[:31]\n                        details_df.to_excel(writer, sheet_name=sheet_name, index=False)\n    \n        # ✅ Fail test at the end\n>       assert not failed_checks, \"\\n\".join(failed_checks)\n               ^^^^^^^^^^^^^^^^^\nE       AssertionError: Mismatch in source_doctors vs target_doctors\nE       Mismatch in source_patients vs target_patients\n\nsrc\\Check_column_order.py:94: AssertionError","steps":[],"attachments":[{"uid":"e8605152dd8ef6f8","name":"stdout","source":"e8605152dd8ef6f8.txt","type":"text/plain","size":92}],"parameters":[],"attachmentStep":false,"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"target_db::0","time":{"start":1759841960142,"stop":1759841960142,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"source_db::0","time":{"start":1759841960143,"stop":1759841960144,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_smoke_suite"},{"name":"host","value":"INATS-LTP-066"},{"name":"thread","value":"39008-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_smoke_suite"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"b34bc194c4e6d06.json","parameterValues":[]}