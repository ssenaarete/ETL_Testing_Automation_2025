{"uid":"46d2fda18c54e94f","name":"test_Job_Execution_validation","fullName":"tests.test_smoke_suite#test_Job_Execution_validation","historyId":"2436129a35ab5bdddf44a6ed75c219db","time":{"start":1759842610967,"stop":1759842611004,"duration":37},"status":"failed","statusMessage":"AssertionError: ❌ One or more jobs failed. Check Job Execution report.","statusTrace":"config_loader = <utils.config_loader.ConfigLoader object at 0x000001BE3CB6EBA0>\n\n    @pytest.mark.skipif(not should_run(\"Job_Run_validation\"), reason=\"Marked N in Excel\")\n    @pytest.mark.not_for_source\n    def test_Job_Execution_validation(config_loader):\n        validator = JobExecutionValidation(config_loader)\n>       validator.run()\n\ntests\\test_smoke_suite.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.Job_Run_validation.JobExecutionValidation object at 0x000001BE3CB6EF90>\n\n    def run(self):\n        if self.excel_df.empty:\n            logging.error(\"❌ Jobs sheet is missing or empty in Excel.\")\n            return\n    \n        results = []\n        # screenshots = []\n    \n        for _, row in self.excel_df.iterrows():\n            job_name = str(row.get(\"Job_Name\", \"\")).strip()\n            job_command = str(row.get(\"Job_Command\", \"\")).strip()\n            run_flag = str(row.get(\"Run (Y/N)\", \"N\")).strip().upper()\n    \n            if run_flag != \"Y\":\n                logging.info(f\"⏭ Skipping job: {job_name}\")\n                results.append({\n                    \"Job_Name\": job_name,\n                    \"Command\": job_command,\n                    \"Run_Flag\": run_flag,\n                    \"Status\": \"SKIPPED\",\n                    \"Execution_Time\": None,\n                    \"Error\": None,\n                })\n                continue\n    \n            start_time = time.time()\n            try:\n                logging.info(f\"▶ Running job: {job_name} | Command: {job_command}\")\n                self.db.execute_non_query(job_command)  # run job\n                exec_time = round(time.time() - start_time, 2)\n    \n                results.append({\n                    \"Job_Name\": job_name,\n                    \"Command\": job_command,\n                    \"Run_Flag\": run_flag,\n                    \"Status\": \"PASS\",\n                    \"Execution_Time\": exec_time,\n                    \"Error\": None,\n                })\n    \n            except Exception as ex:\n                exec_time = round(time.time() - start_time, 2)\n                logging.error(f\"❌ Job failed: {job_name} | Error: {ex}\")\n    \n                results.append({\n                    \"Job_Name\": job_name,\n                    \"Command\": job_command,\n                    \"Run_Flag\": run_flag,\n                    \"Status\": \"FAIL\",\n                    \"Execution_Time\": exec_time,\n                    \"Error\": str(ex),\n                })\n    \n        # Save report\n        report_file = self.report_helper.save_report(results, test_type=\"Job_Execution_Validation\")\n    \n        try:\n            post_query = f\"\"\"\n                    WITH LatestRun AS (\n                    SELECT\n                        j.name AS JobName,\n                        h.run_date,\n                        h.run_time,\n                        ROW_NUMBER() OVER (PARTITION BY j.job_id ORDER BY h.run_date DESC, h.run_time DESC) AS rn,\n                        CASE h.run_status\n                            WHEN 0 THEN 'Failed'\n                            WHEN 1 THEN 'Succeeded'\n                            WHEN 2 THEN 'Retry'\n                            WHEN 3 THEN 'Canceled'\n                            WHEN 4 THEN 'In Progress'\n                        END AS RunStatus,\n                        h.message\n                    FROM msdb.dbo.sysjobs j\n                    JOIN msdb.dbo.sysjobhistory h\n                        ON j.job_id = h.job_id\n                    WHERE h.step_id = 0\n                    AND j.name = '{job_name}'\n                )\n                SELECT JobName, run_date, run_time, RunStatus,message\n                FROM LatestRun\n                WHERE rn = 1\n                ORDER BY JobName;\n            \"\"\"\n    \n            print(\"\uD83D\uDD0D Capturing job execution log from msdb... - \", post_query)\n    \n            cursor = self.db.conn.cursor()\n            cursor.execute(post_query)\n            result = cursor.fetchall()\n            print(\"DEBUG - fetchall result:\", result)\n            for i, row in enumerate(result, start=1):\n                print(f\"Row {i}: {row} | len={len(row)} | type={type(row)}\")\n            columns = [desc[0] for desc in cursor.description]  # ['JobName','run_date','run_time','RunStatus','message']\n    \n            print(\"DEBUG - Raw result from DB:\", result)\n            print(\"DEBUG - Columns from DB:\", columns)\n    \n            # Ensure rows are tuples\n            cleaned_result = [tuple(row) for row in result]\n    \n            df_post = pd.DataFrame(cleaned_result, columns=columns)\n    \n            with pd.ExcelWriter(report_file, engine=\"openpyxl\", mode=\"a\", if_sheet_exists=\"overlay\") as writer:\n                df_post.to_excel(writer, sheet_name=\"Job_Execution_Log\", index=False)\n    \n            logging.info(\"\uD83D\uDCC4 Job execution log appended to Excel report.\")\n    \n        except Exception as ex:\n                logging.error(f\"❌ Could not capture job execution log: {ex}\")\n    \n    \n        # Fail test if any FAIL status found\n>       assert all(r[\"Status\"] in (\"PASS\", \"SKIPPED\") for r in results), (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            \"❌ One or more jobs failed. Check Job Execution report.\"\n        )\nE       AssertionError: ❌ One or more jobs failed. Check Job Execution report.\n\nsrc\\Job_Run_validation.py:130: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1759842538097,"stop":1759842538197,"duration":100},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"config_loader","time":{"start":1759842547375,"stop":1759842547390,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: ❌ One or more jobs failed. Check Job Execution report.","statusTrace":"config_loader = <utils.config_loader.ConfigLoader object at 0x000001BE3CB6EBA0>\n\n    @pytest.mark.skipif(not should_run(\"Job_Run_validation\"), reason=\"Marked N in Excel\")\n    @pytest.mark.not_for_source\n    def test_Job_Execution_validation(config_loader):\n        validator = JobExecutionValidation(config_loader)\n>       validator.run()\n\ntests\\test_smoke_suite.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.Job_Run_validation.JobExecutionValidation object at 0x000001BE3CB6EF90>\n\n    def run(self):\n        if self.excel_df.empty:\n            logging.error(\"❌ Jobs sheet is missing or empty in Excel.\")\n            return\n    \n        results = []\n        # screenshots = []\n    \n        for _, row in self.excel_df.iterrows():\n            job_name = str(row.get(\"Job_Name\", \"\")).strip()\n            job_command = str(row.get(\"Job_Command\", \"\")).strip()\n            run_flag = str(row.get(\"Run (Y/N)\", \"N\")).strip().upper()\n    \n            if run_flag != \"Y\":\n                logging.info(f\"⏭ Skipping job: {job_name}\")\n                results.append({\n                    \"Job_Name\": job_name,\n                    \"Command\": job_command,\n                    \"Run_Flag\": run_flag,\n                    \"Status\": \"SKIPPED\",\n                    \"Execution_Time\": None,\n                    \"Error\": None,\n                })\n                continue\n    \n            start_time = time.time()\n            try:\n                logging.info(f\"▶ Running job: {job_name} | Command: {job_command}\")\n                self.db.execute_non_query(job_command)  # run job\n                exec_time = round(time.time() - start_time, 2)\n    \n                results.append({\n                    \"Job_Name\": job_name,\n                    \"Command\": job_command,\n                    \"Run_Flag\": run_flag,\n                    \"Status\": \"PASS\",\n                    \"Execution_Time\": exec_time,\n                    \"Error\": None,\n                })\n    \n            except Exception as ex:\n                exec_time = round(time.time() - start_time, 2)\n                logging.error(f\"❌ Job failed: {job_name} | Error: {ex}\")\n    \n                results.append({\n                    \"Job_Name\": job_name,\n                    \"Command\": job_command,\n                    \"Run_Flag\": run_flag,\n                    \"Status\": \"FAIL\",\n                    \"Execution_Time\": exec_time,\n                    \"Error\": str(ex),\n                })\n    \n        # Save report\n        report_file = self.report_helper.save_report(results, test_type=\"Job_Execution_Validation\")\n    \n        try:\n            post_query = f\"\"\"\n                    WITH LatestRun AS (\n                    SELECT\n                        j.name AS JobName,\n                        h.run_date,\n                        h.run_time,\n                        ROW_NUMBER() OVER (PARTITION BY j.job_id ORDER BY h.run_date DESC, h.run_time DESC) AS rn,\n                        CASE h.run_status\n                            WHEN 0 THEN 'Failed'\n                            WHEN 1 THEN 'Succeeded'\n                            WHEN 2 THEN 'Retry'\n                            WHEN 3 THEN 'Canceled'\n                            WHEN 4 THEN 'In Progress'\n                        END AS RunStatus,\n                        h.message\n                    FROM msdb.dbo.sysjobs j\n                    JOIN msdb.dbo.sysjobhistory h\n                        ON j.job_id = h.job_id\n                    WHERE h.step_id = 0\n                    AND j.name = '{job_name}'\n                )\n                SELECT JobName, run_date, run_time, RunStatus,message\n                FROM LatestRun\n                WHERE rn = 1\n                ORDER BY JobName;\n            \"\"\"\n    \n            print(\"\uD83D\uDD0D Capturing job execution log from msdb... - \", post_query)\n    \n            cursor = self.db.conn.cursor()\n            cursor.execute(post_query)\n            result = cursor.fetchall()\n            print(\"DEBUG - fetchall result:\", result)\n            for i, row in enumerate(result, start=1):\n                print(f\"Row {i}: {row} | len={len(row)} | type={type(row)}\")\n            columns = [desc[0] for desc in cursor.description]  # ['JobName','run_date','run_time','RunStatus','message']\n    \n            print(\"DEBUG - Raw result from DB:\", result)\n            print(\"DEBUG - Columns from DB:\", columns)\n    \n            # Ensure rows are tuples\n            cleaned_result = [tuple(row) for row in result]\n    \n            df_post = pd.DataFrame(cleaned_result, columns=columns)\n    \n            with pd.ExcelWriter(report_file, engine=\"openpyxl\", mode=\"a\", if_sheet_exists=\"overlay\") as writer:\n                df_post.to_excel(writer, sheet_name=\"Job_Execution_Log\", index=False)\n    \n            logging.info(\"\uD83D\uDCC4 Job execution log appended to Excel report.\")\n    \n        except Exception as ex:\n                logging.error(f\"❌ Could not capture job execution log: {ex}\")\n    \n    \n        # Fail test if any FAIL status found\n>       assert all(r[\"Status\"] in (\"PASS\", \"SKIPPED\") for r in results), (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            \"❌ One or more jobs failed. Check Job Execution report.\"\n        )\nE       AssertionError: ❌ One or more jobs failed. Check Job Execution report.\n\nsrc\\Job_Run_validation.py:130: AssertionError","steps":[],"attachments":[{"uid":"350000d9effa7b02","name":"log","source":"350000d9effa7b02.txt","type":"text/plain","size":243},{"uid":"9aa00029e1bf8925","name":"stdout","source":"9aa00029e1bf8925.txt","type":"text/plain","size":1913}],"parameters":[],"attachmentStep":false,"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"tag","value":"not_for_source"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_smoke_suite"},{"name":"host","value":"INATS-LTP-066"},{"name":"thread","value":"37152-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_smoke_suite"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["not_for_source"]},"source":"46d2fda18c54e94f.json","parameterValues":[]}