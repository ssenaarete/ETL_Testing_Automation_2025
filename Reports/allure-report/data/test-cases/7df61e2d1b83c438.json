{"uid":"7df61e2d1b83c438","name":"test_data_precision_validation","fullName":"tests.test_smoke_suite#test_data_precision_validation","historyId":"9561f0a6c8b96857d089cc193809ad34","time":{"start":1759842610898,"stop":1759842610920,"duration":22},"status":"failed","statusMessage":"AssertionError: ❌ Columns missing in DB: [{'Table_Excel': 'target_patients', 'Column_Excel': 'address', 'DataType_Excel': 'VARCHAR', 'DataType_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}, {'Table_Excel': 'target_patients', 'Column_Excel': 'Version_Begin_Date', 'DataType_Excel': 'DATETIME', 'DataType_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}, {'Table_Excel': 'target_patients', 'Column_Excel': 'Version_End_Date', 'DataType_Excel': 'DATETIME', 'DataType_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}, {'Table_Excel': 'target_patients', 'Column_Excel': 'Is_Current', 'DataType_Excel': 'VARCHAR', 'DataType_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}]","statusTrace":"config_loader = <utils.config_loader.ConfigLoader object at 0x000001BE3CB6EBA0>\n\n    @pytest.mark.skipif(not should_run(\"Data_Precision_validation\"), reason=\"Marked N in Excel\")\n    def test_data_precision_validation(config_loader):\n        validator = DataPrecisionValidation(config_loader)\n>       validator.run()\n\ntests\\test_smoke_suite.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.data_precision_validation.DataPrecisionValidation object at 0x000001BE3CB6EE40>\n\n    def run(self):\n        df = self.df.copy()\n        results = []\n    \n        for _, row in df.iterrows():\n            table = row[\"table_name\"]\n            column = row[\"column_name\"]\n            expected_dtype = str(row[\"Data_Type\"]).strip().upper()\n    \n            db_meta = self.get_db_metadata(table)\n            db_cols = [col[\"COLUMN_NAME\"] for col in db_meta]\n    \n            if column not in db_cols:\n                results.append({\n                    \"Table_Excel\": table,\n                    \"Column_Excel\": column,\n                    \"DataType_Excel\": expected_dtype,\n                    \"DataType_DB\": \"N/A\",\n                    \"Status\": \"Mismatch (Column Missing in DB)\"\n                })\n                continue\n    \n            db_col = next(c for c in db_meta if c[\"COLUMN_NAME\"] == column)\n            db_dtype = db_col[\"DATA_TYPE\"].upper()\n            db_precision = db_col.get(\"PRECISION\")\n            db_maxlen = db_col.get(\"MAX_LENGTH\")\n    \n            precision_issue = None\n            if db_dtype in (\"DECIMAL\", \"NUMERIC\") and db_precision and db_precision > 32:\n                precision_issue = f\"❌ Mismatch - Numeric precision too high: {db_precision} > 32\"\n    \n            if db_dtype in (\"CHAR\", \"NCHAR\", \"VARCHAR\", \"NVARCHAR\") and db_maxlen and db_maxlen > 32:\n                precision_issue = f\"❌ Mismatch - String length too high: {db_maxlen} > 32\"\n    \n            if precision_issue:\n                results.append({\n                    \"Database\": self.db.database,\n                    \"Table_Excel\": table,\n                    \"Column_Excel\": column,\n                    \"DataType_Excel\": expected_dtype,\n                    \"DataType_DB\": db_dtype,\n                    \"Status\": precision_issue\n                })\n    \n        # Save + print\n        self.report_helper.save_report(results, test_type=\"DataType_Precision_Validation\")\n    \n        # ✅ Assertions\n        assert results, \"❌ Validation returned no results — check Excel sheet or DB connection.\"\n    \n        missing_columns = [r for r in results if \"Missing\" in r.get(\"Status\", \"\")]\n>       assert not missing_columns, f\"❌ Columns missing in DB: {missing_columns}\"\n               ^^^^^^^^^^^^^^^^^^^\nE       AssertionError: ❌ Columns missing in DB: [{'Table_Excel': 'target_patients', 'Column_Excel': 'address', 'DataType_Excel': 'VARCHAR', 'DataType_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}, {'Table_Excel': 'target_patients', 'Column_Excel': 'Version_Begin_Date', 'DataType_Excel': 'DATETIME', 'DataType_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}, {'Table_Excel': 'target_patients', 'Column_Excel': 'Version_End_Date', 'DataType_Excel': 'DATETIME', 'DataType_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}, {'Table_Excel': 'target_patients', 'Column_Excel': 'Is_Current', 'DataType_Excel': 'VARCHAR', 'DataType_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}]\n\nsrc\\data_precision_validation.py:95: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1759842538097,"stop":1759842538197,"duration":100},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"config_loader","time":{"start":1759842547375,"stop":1759842547390,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: ❌ Columns missing in DB: [{'Table_Excel': 'target_patients', 'Column_Excel': 'address', 'DataType_Excel': 'VARCHAR', 'DataType_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}, {'Table_Excel': 'target_patients', 'Column_Excel': 'Version_Begin_Date', 'DataType_Excel': 'DATETIME', 'DataType_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}, {'Table_Excel': 'target_patients', 'Column_Excel': 'Version_End_Date', 'DataType_Excel': 'DATETIME', 'DataType_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}, {'Table_Excel': 'target_patients', 'Column_Excel': 'Is_Current', 'DataType_Excel': 'VARCHAR', 'DataType_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}]","statusTrace":"config_loader = <utils.config_loader.ConfigLoader object at 0x000001BE3CB6EBA0>\n\n    @pytest.mark.skipif(not should_run(\"Data_Precision_validation\"), reason=\"Marked N in Excel\")\n    def test_data_precision_validation(config_loader):\n        validator = DataPrecisionValidation(config_loader)\n>       validator.run()\n\ntests\\test_smoke_suite.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.data_precision_validation.DataPrecisionValidation object at 0x000001BE3CB6EE40>\n\n    def run(self):\n        df = self.df.copy()\n        results = []\n    \n        for _, row in df.iterrows():\n            table = row[\"table_name\"]\n            column = row[\"column_name\"]\n            expected_dtype = str(row[\"Data_Type\"]).strip().upper()\n    \n            db_meta = self.get_db_metadata(table)\n            db_cols = [col[\"COLUMN_NAME\"] for col in db_meta]\n    \n            if column not in db_cols:\n                results.append({\n                    \"Table_Excel\": table,\n                    \"Column_Excel\": column,\n                    \"DataType_Excel\": expected_dtype,\n                    \"DataType_DB\": \"N/A\",\n                    \"Status\": \"Mismatch (Column Missing in DB)\"\n                })\n                continue\n    \n            db_col = next(c for c in db_meta if c[\"COLUMN_NAME\"] == column)\n            db_dtype = db_col[\"DATA_TYPE\"].upper()\n            db_precision = db_col.get(\"PRECISION\")\n            db_maxlen = db_col.get(\"MAX_LENGTH\")\n    \n            precision_issue = None\n            if db_dtype in (\"DECIMAL\", \"NUMERIC\") and db_precision and db_precision > 32:\n                precision_issue = f\"❌ Mismatch - Numeric precision too high: {db_precision} > 32\"\n    \n            if db_dtype in (\"CHAR\", \"NCHAR\", \"VARCHAR\", \"NVARCHAR\") and db_maxlen and db_maxlen > 32:\n                precision_issue = f\"❌ Mismatch - String length too high: {db_maxlen} > 32\"\n    \n            if precision_issue:\n                results.append({\n                    \"Database\": self.db.database,\n                    \"Table_Excel\": table,\n                    \"Column_Excel\": column,\n                    \"DataType_Excel\": expected_dtype,\n                    \"DataType_DB\": db_dtype,\n                    \"Status\": precision_issue\n                })\n    \n        # Save + print\n        self.report_helper.save_report(results, test_type=\"DataType_Precision_Validation\")\n    \n        # ✅ Assertions\n        assert results, \"❌ Validation returned no results — check Excel sheet or DB connection.\"\n    \n        missing_columns = [r for r in results if \"Missing\" in r.get(\"Status\", \"\")]\n>       assert not missing_columns, f\"❌ Columns missing in DB: {missing_columns}\"\n               ^^^^^^^^^^^^^^^^^^^\nE       AssertionError: ❌ Columns missing in DB: [{'Table_Excel': 'target_patients', 'Column_Excel': 'address', 'DataType_Excel': 'VARCHAR', 'DataType_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}, {'Table_Excel': 'target_patients', 'Column_Excel': 'Version_Begin_Date', 'DataType_Excel': 'DATETIME', 'DataType_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}, {'Table_Excel': 'target_patients', 'Column_Excel': 'Version_End_Date', 'DataType_Excel': 'DATETIME', 'DataType_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}, {'Table_Excel': 'target_patients', 'Column_Excel': 'Is_Current', 'DataType_Excel': 'VARCHAR', 'DataType_DB': 'N/A', 'Status': 'Mismatch (Column Missing in DB)'}]\n\nsrc\\data_precision_validation.py:95: AssertionError","steps":[],"attachments":[{"uid":"fb60d9a7c6c3627d","name":"stdout","source":"fb60d9a7c6c3627d.txt","type":"text/plain","size":104}],"parameters":[],"attachmentStep":false,"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_smoke_suite"},{"name":"host","value":"INATS-LTP-066"},{"name":"thread","value":"37152-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_smoke_suite"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"7df61e2d1b83c438.json","parameterValues":[]}