{"uid":"5db544494c47602c","name":"test_transformation_sourceTotarget_validation","fullName":"tests.test_smoke_suite#test_transformation_sourceTotarget_validation","historyId":"e69b487fc88630fad25e01a74b9574fd","time":{"start":1759840979979,"stop":1759841007477,"duration":27498},"status":"failed","statusMessage":"AssertionError: ❌ Some transformation checks failed. See report for details.","statusTrace":"source_db = <utils.db_helper.DBHelper object at 0x000002177EE4C350>\ntarget_db = <utils.db_helper.DBHelper object at 0x000002176DF2ED00>\nreport_helper = <utils.report_helper.ReportHelper object at 0x000002177EF7CC50>\n\n    @pytest.mark.skipif(not should_run(\"transformation_validation\"), reason=\"Marked N in Excel\")\n    def test_transformation_sourceTotarget_validation(source_db, target_db, report_helper):\n        validator = TransformationValidation()\n>       validator.run(source_db, target_db, report_helper)\n\ntests\\test_smoke_suite.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.transformation_validation.TransformationValidation object at 0x000002177ECFF230>\nsource_db = <utils.db_helper.DBHelper object at 0x000002177EE4C350>\ntarget_db = <utils.db_helper.DBHelper object at 0x000002176DF2ED00>\nreport_helper = <utils.report_helper.ReportHelper object at 0x000002177EF7CC50>\n\n    def run(self, source_db, target_db, report_helper):\n        # Read queries from SOURCEDB sheet\n        df = pd.read_excel(self.excel_path, sheet_name=\"TRANSFORMATION\", engine=\"openpyxl\")\n    \n        # Filter only Is_Transformation = Y\n        df = df[df[\"Is_Transformation\"].str.upper() == \"Y\"]\n    \n        results = []\n        mismatch_records = []   # ✅ store mismatches separately\n    \n        for _, row in df.iterrows():\n            columns = row[\"column_name\"]\n            source_query = row.get(\"Source_Query\")\n            print(f\"Executing Source Query: {source_query}\")\n            target_query = row.get(\"Target_Query\")\n            print(f\"Executing Target Query: {target_query}\")\n    \n            # Execute queries\n            # source_data = self.db_source.execute_query(source_query)\n            # target_data = self.db_target.execute_query(target_query)\n    \n            source_data = source_db.execute_query(source_query)\n            target_data = target_db.execute_query(target_query)\n    \n            # Convert to dict for row-by-row comparison\n            source_dict = {row[0]: row[1] for row in source_data if row[0] is not None}\n            target_dict = {row[0]: row[1] for row in target_data if row[0] is not None}\n    \n            mismatches = []\n            for key, src_val in source_dict.items():\n                tgt_val = target_dict.get(key)\n                if tgt_val is None:\n                    mismatches.append({\"Key\": key, \"Source_Value\": src_val, \"Target_Value\": \"MISSING\"})\n                    mismatch_records.append({\n                        \"Transformation Name\": f\"{columns}_Transformation\",\n                        \"Column_Name\": columns,\n                        # \"Key\": key,\n                        \"Source_Value\": src_val,\n                        \"Target_Value\": \"MISSING\"\n                    })\n                elif src_val != tgt_val:\n                    mismatches.append({\"Key\": key, \"Source_Value\": src_val, \"Target_Value\": tgt_val})\n                    mismatch_records.append({\n                        \"Transformation Name\": f\"{columns}_Transformation\",\n                        \"Column_Name\": columns,\n                        # \"Key\": key,\n                        \"Source_Value\": src_val,\n                        \"Target_Value\": tgt_val\n                    })\n            status = \"PASS\" if not mismatches else \"FAIL\"\n    \n            results.append({\n                # \"Transformation Name\": self.transformation_name,  # ✅ added transformation name\n                \"Transformation Name\": f\"{columns}_Transformation\",  # ✅ added transformation name\n                \"Column_Name\": columns,   # <-- keep column name in report\n                \"Mismatches\": \"Mismatch\" if mismatches else \"Matched\",\n                \"Status\": status\n            })\n    \n            if status == \"PASS\":\n                logging.info(f\"✅ Transformation check passed for {columns}. No mismatches found.\")\n    \n        # Save report\n        report_file = report_helper.save_report(results, test_type=\"Transformation_Logic_check\")\n        print(f\"DEBUG: report_file returned = {report_file}\")\n        # report_helper.print_validation_report_Transformation_logic(results)\n    \n        if mismatch_records:\n            mismatch_df = pd.DataFrame(mismatch_records)\n            with pd.ExcelWriter(report_file, engine=\"openpyxl\", mode=\"a\", if_sheet_exists=\"replace\") as writer:\n                mismatch_df.to_excel(writer, sheet_name=\"Mismatches\", index=False)\n    \n            logging.info(f\"Mismatches exported to new worksheet in: {report_file}\")\n    \n        # ✅ Fail test only at the end (after report generation)\n>       assert all(r[\"Status\"] == \"PASS\" for r in results), \"❌ Some transformation checks failed. See report for details.\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: ❌ Some transformation checks failed. See report for details.\n\nsrc\\transformation_validation.py:101: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1759840862031,"stop":1759840862212,"duration":181},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"source_db","time":{"start":1759840979973,"stop":1759840979975,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"target_db","time":{"start":1759840979975,"stop":1759840979977,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"report_helper","time":{"start":1759840979977,"stop":1759840979978,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: ❌ Some transformation checks failed. See report for details.","statusTrace":"source_db = <utils.db_helper.DBHelper object at 0x000002177EE4C350>\ntarget_db = <utils.db_helper.DBHelper object at 0x000002176DF2ED00>\nreport_helper = <utils.report_helper.ReportHelper object at 0x000002177EF7CC50>\n\n    @pytest.mark.skipif(not should_run(\"transformation_validation\"), reason=\"Marked N in Excel\")\n    def test_transformation_sourceTotarget_validation(source_db, target_db, report_helper):\n        validator = TransformationValidation()\n>       validator.run(source_db, target_db, report_helper)\n\ntests\\test_smoke_suite.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.transformation_validation.TransformationValidation object at 0x000002177ECFF230>\nsource_db = <utils.db_helper.DBHelper object at 0x000002177EE4C350>\ntarget_db = <utils.db_helper.DBHelper object at 0x000002176DF2ED00>\nreport_helper = <utils.report_helper.ReportHelper object at 0x000002177EF7CC50>\n\n    def run(self, source_db, target_db, report_helper):\n        # Read queries from SOURCEDB sheet\n        df = pd.read_excel(self.excel_path, sheet_name=\"TRANSFORMATION\", engine=\"openpyxl\")\n    \n        # Filter only Is_Transformation = Y\n        df = df[df[\"Is_Transformation\"].str.upper() == \"Y\"]\n    \n        results = []\n        mismatch_records = []   # ✅ store mismatches separately\n    \n        for _, row in df.iterrows():\n            columns = row[\"column_name\"]\n            source_query = row.get(\"Source_Query\")\n            print(f\"Executing Source Query: {source_query}\")\n            target_query = row.get(\"Target_Query\")\n            print(f\"Executing Target Query: {target_query}\")\n    \n            # Execute queries\n            # source_data = self.db_source.execute_query(source_query)\n            # target_data = self.db_target.execute_query(target_query)\n    \n            source_data = source_db.execute_query(source_query)\n            target_data = target_db.execute_query(target_query)\n    \n            # Convert to dict for row-by-row comparison\n            source_dict = {row[0]: row[1] for row in source_data if row[0] is not None}\n            target_dict = {row[0]: row[1] for row in target_data if row[0] is not None}\n    \n            mismatches = []\n            for key, src_val in source_dict.items():\n                tgt_val = target_dict.get(key)\n                if tgt_val is None:\n                    mismatches.append({\"Key\": key, \"Source_Value\": src_val, \"Target_Value\": \"MISSING\"})\n                    mismatch_records.append({\n                        \"Transformation Name\": f\"{columns}_Transformation\",\n                        \"Column_Name\": columns,\n                        # \"Key\": key,\n                        \"Source_Value\": src_val,\n                        \"Target_Value\": \"MISSING\"\n                    })\n                elif src_val != tgt_val:\n                    mismatches.append({\"Key\": key, \"Source_Value\": src_val, \"Target_Value\": tgt_val})\n                    mismatch_records.append({\n                        \"Transformation Name\": f\"{columns}_Transformation\",\n                        \"Column_Name\": columns,\n                        # \"Key\": key,\n                        \"Source_Value\": src_val,\n                        \"Target_Value\": tgt_val\n                    })\n            status = \"PASS\" if not mismatches else \"FAIL\"\n    \n            results.append({\n                # \"Transformation Name\": self.transformation_name,  # ✅ added transformation name\n                \"Transformation Name\": f\"{columns}_Transformation\",  # ✅ added transformation name\n                \"Column_Name\": columns,   # <-- keep column name in report\n                \"Mismatches\": \"Mismatch\" if mismatches else \"Matched\",\n                \"Status\": status\n            })\n    \n            if status == \"PASS\":\n                logging.info(f\"✅ Transformation check passed for {columns}. No mismatches found.\")\n    \n        # Save report\n        report_file = report_helper.save_report(results, test_type=\"Transformation_Logic_check\")\n        print(f\"DEBUG: report_file returned = {report_file}\")\n        # report_helper.print_validation_report_Transformation_logic(results)\n    \n        if mismatch_records:\n            mismatch_df = pd.DataFrame(mismatch_records)\n            with pd.ExcelWriter(report_file, engine=\"openpyxl\", mode=\"a\", if_sheet_exists=\"replace\") as writer:\n                mismatch_df.to_excel(writer, sheet_name=\"Mismatches\", index=False)\n    \n            logging.info(f\"Mismatches exported to new worksheet in: {report_file}\")\n    \n        # ✅ Fail test only at the end (after report generation)\n>       assert all(r[\"Status\"] == \"PASS\" for r in results), \"❌ Some transformation checks failed. See report for details.\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: ❌ Some transformation checks failed. See report for details.\n\nsrc\\transformation_validation.py:101: AssertionError","steps":[],"attachments":[{"uid":"991b4a97b37cbccc","name":"stdout","source":"991b4a97b37cbccc.txt","type":"text/plain","size":655}],"parameters":[],"attachmentStep":false,"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"target_db::0","time":{"start":1759841007497,"stop":1759841007498,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"source_db::0","time":{"start":1759841007501,"stop":1759841007502,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_smoke_suite"},{"name":"host","value":"INATS-LTP-066"},{"name":"thread","value":"33804-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_smoke_suite"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"5db544494c47602c.json","parameterValues":[]}