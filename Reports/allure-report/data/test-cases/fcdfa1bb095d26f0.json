{"uid":"fcdfa1bb095d26f0","name":"test_datacompleteness_StoT_validation","fullName":"tests.test_smoke_suite#test_datacompleteness_StoT_validation","historyId":"78065deef873a44178d62805df7675b5","time":{"start":1756758959808,"stop":1756758959887,"duration":79},"status":"failed","statusMessage":"AssertionError: ❌ Data completeness check failed for stage_doctors ↔ target_doctors. Missing rows = 2\n❌ Data completeness check failed for stage_patients ↔ target_patients. Missing rows = 1","statusTrace":"stage_db = <utils.db_helper.DBHelper object at 0x0000022C5E4E8290>\ntarget_db = <utils.db_helper.DBHelper object at 0x0000022C5E502140>\nreport_helper = <utils.report_helper.ReportHelper object at 0x0000022C5E4FB4D0>\n\n    @pytest.mark.skipif(not should_run(\"data_completeness_validation_StageToTarget\"), reason=\"Marked N in Excel\")\n    def test_datacompleteness_StoT_validation(stage_db, target_db,report_helper):\n        cv = Validation_StageToTarget()\n>       cv.run(stage_db, target_db,report_helper)\n\ntests\\test_smoke_suite.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.data_completeness_validation.Validation_StageToTarget object at 0x0000022C5E2F7E00>\nstage_db = <utils.db_helper.DBHelper object at 0x0000022C5E4E8290>\ntarget_db = <utils.db_helper.DBHelper object at 0x0000022C5E502140>\nreport_helper = <utils.report_helper.ReportHelper object at 0x0000022C5E4FB4D0>\n\n    def run(self, stage_db, target_db, report_helper):\n        df = pd.read_excel(self.excel_path, sheet_name=\"Table_Mapping\")\n    \n        results = []\n        failed_checks = []  # track failures\n    \n        for _, row in df.iterrows():\n            stage_table = row[\"stage_table\"]\n            target_table = row[\"target_table\"]\n    \n            common_columns = self.get_common_columns(stage_db, target_db,stage_table, target_table)\n            # print(f\"Common columns for {stage_table} ↔ {target_table}: {common_columns}\")\n            logging.info(f\"Common columns for {stage_table} ↔ {target_table}: {common_columns}\")\n    \n            # if not common_columns:\n            #     logging.warning(f\"No common columns found for {stage_table} ↔ {target_table}\")\n            #     continue\n    \n            assert common_columns, f\"❌ No common columns found for {stage_table} ↔ {target_table}\"\n    \n            completeness_query = f\"\"\"\n                SELECT COUNT(*) AS Missing_Count\n                FROM (\n                    SELECT {common_columns} FROM {self.config.get(\"STAGEDB\", \"database\")}.dbo.{stage_table}\n                    EXCEPT\n                    SELECT {common_columns} FROM {self.config.get(\"TARGETDB\", \"database\")}.dbo.{target_table}\n                ) AS diff\n            \"\"\"\n    \n    \n            logging.info(f\"Running completeness check: {stage_table} → {target_table}\")\n            raw_result = stage_db.execute_query(completeness_query)\n    \n            missing_count = raw_result[0][0] if raw_result else 0\n    \n            # assert missing_count == 0, (\n            #     f\"❌ Data completeness check failed for {stage_table} ↔ {target_table}. \"\n            #     f\"Missing rows = {missing_count}\"\n            # )\n    \n            is_check_passed = missing_count == 0\n    \n            results.append({\n                \"Stage_DB\": self.config.get(\"STAGEDB\", \"database\"),\n                \"Stage_Table\": stage_table,\n                \"Target_DB\": self.config.get(\"TARGETDB\", \"database\"),\n                \"Target_Table\": target_table,\n                \"Common_Columns\": common_columns,\n                \"Data_Missing_Count\": missing_count,\n                \"IsCheckPassed\": is_check_passed\n            })\n    \n            if not is_check_passed:\n                failed_checks.append(f\"❌ Data completeness check failed for {stage_table} ↔ {target_table}. Missing rows = {missing_count}\")\n    \n            # assert is_check_passed, f\"❌ Data completeness check failed for {stage_table} ↔ {target_table}\"\n    \n        # ✅ Save & print report\n        report_helper.save_report(results, test_type=\"Data_Completeness_Stage_to_Target\")\n        # self.report_helper.print_validation_report_Stage_to_Target(results)\n    \n        # ✅ Fail test at the end (after report generation)\n>       assert not failed_checks, \"\\n\".join(failed_checks)\n               ^^^^^^^^^^^^^^^^^\nE       AssertionError: ❌ Data completeness check failed for stage_doctors ↔ target_doctors. Missing rows = 2\nE       ❌ Data completeness check failed for stage_patients ↔ target_patients. Missing rows = 1\n\nsrc\\data_completeness_validation.py:209: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"stage_db","time":{"start":1756758959805,"stop":1756758959805,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"target_db","time":{"start":1756758959806,"stop":1756758959806,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"report_helper","time":{"start":1756758959806,"stop":1756758959807,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: ❌ Data completeness check failed for stage_doctors ↔ target_doctors. Missing rows = 2\n❌ Data completeness check failed for stage_patients ↔ target_patients. Missing rows = 1","statusTrace":"stage_db = <utils.db_helper.DBHelper object at 0x0000022C5E4E8290>\ntarget_db = <utils.db_helper.DBHelper object at 0x0000022C5E502140>\nreport_helper = <utils.report_helper.ReportHelper object at 0x0000022C5E4FB4D0>\n\n    @pytest.mark.skipif(not should_run(\"data_completeness_validation_StageToTarget\"), reason=\"Marked N in Excel\")\n    def test_datacompleteness_StoT_validation(stage_db, target_db,report_helper):\n        cv = Validation_StageToTarget()\n>       cv.run(stage_db, target_db,report_helper)\n\ntests\\test_smoke_suite.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.data_completeness_validation.Validation_StageToTarget object at 0x0000022C5E2F7E00>\nstage_db = <utils.db_helper.DBHelper object at 0x0000022C5E4E8290>\ntarget_db = <utils.db_helper.DBHelper object at 0x0000022C5E502140>\nreport_helper = <utils.report_helper.ReportHelper object at 0x0000022C5E4FB4D0>\n\n    def run(self, stage_db, target_db, report_helper):\n        df = pd.read_excel(self.excel_path, sheet_name=\"Table_Mapping\")\n    \n        results = []\n        failed_checks = []  # track failures\n    \n        for _, row in df.iterrows():\n            stage_table = row[\"stage_table\"]\n            target_table = row[\"target_table\"]\n    \n            common_columns = self.get_common_columns(stage_db, target_db,stage_table, target_table)\n            # print(f\"Common columns for {stage_table} ↔ {target_table}: {common_columns}\")\n            logging.info(f\"Common columns for {stage_table} ↔ {target_table}: {common_columns}\")\n    \n            # if not common_columns:\n            #     logging.warning(f\"No common columns found for {stage_table} ↔ {target_table}\")\n            #     continue\n    \n            assert common_columns, f\"❌ No common columns found for {stage_table} ↔ {target_table}\"\n    \n            completeness_query = f\"\"\"\n                SELECT COUNT(*) AS Missing_Count\n                FROM (\n                    SELECT {common_columns} FROM {self.config.get(\"STAGEDB\", \"database\")}.dbo.{stage_table}\n                    EXCEPT\n                    SELECT {common_columns} FROM {self.config.get(\"TARGETDB\", \"database\")}.dbo.{target_table}\n                ) AS diff\n            \"\"\"\n    \n    \n            logging.info(f\"Running completeness check: {stage_table} → {target_table}\")\n            raw_result = stage_db.execute_query(completeness_query)\n    \n            missing_count = raw_result[0][0] if raw_result else 0\n    \n            # assert missing_count == 0, (\n            #     f\"❌ Data completeness check failed for {stage_table} ↔ {target_table}. \"\n            #     f\"Missing rows = {missing_count}\"\n            # )\n    \n            is_check_passed = missing_count == 0\n    \n            results.append({\n                \"Stage_DB\": self.config.get(\"STAGEDB\", \"database\"),\n                \"Stage_Table\": stage_table,\n                \"Target_DB\": self.config.get(\"TARGETDB\", \"database\"),\n                \"Target_Table\": target_table,\n                \"Common_Columns\": common_columns,\n                \"Data_Missing_Count\": missing_count,\n                \"IsCheckPassed\": is_check_passed\n            })\n    \n            if not is_check_passed:\n                failed_checks.append(f\"❌ Data completeness check failed for {stage_table} ↔ {target_table}. Missing rows = {missing_count}\")\n    \n            # assert is_check_passed, f\"❌ Data completeness check failed for {stage_table} ↔ {target_table}\"\n    \n        # ✅ Save & print report\n        report_helper.save_report(results, test_type=\"Data_Completeness_Stage_to_Target\")\n        # self.report_helper.print_validation_report_Stage_to_Target(results)\n    \n        # ✅ Fail test at the end (after report generation)\n>       assert not failed_checks, \"\\n\".join(failed_checks)\n               ^^^^^^^^^^^^^^^^^\nE       AssertionError: ❌ Data completeness check failed for stage_doctors ↔ target_doctors. Missing rows = 2\nE       ❌ Data completeness check failed for stage_patients ↔ target_patients. Missing rows = 1\n\nsrc\\data_completeness_validation.py:209: AssertionError","steps":[],"attachments":[{"uid":"c144db6f454fb4c","name":"stdout","source":"c144db6f454fb4c.txt","type":"text/plain","size":108}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[{"name":"target_db::0","time":{"start":1756758959897,"stop":1756758959898,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"stage_db::0","time":{"start":1756758959899,"stop":1756758959899,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_smoke_suite"},{"name":"host","value":"INATS-LTP-066"},{"name":"thread","value":"37384-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_smoke_suite"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"fcdfa1bb095d26f0.json","parameterValues":[]}