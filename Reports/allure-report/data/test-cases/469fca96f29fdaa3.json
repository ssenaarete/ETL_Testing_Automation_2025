{"uid":"469fca96f29fdaa3","name":"test_Date_field_validation","fullName":"tests.test_smoke_suite#test_Date_field_validation","historyId":"d2c854148bdd98d005e49ecc2a25bec8","time":{"start":1756758960495,"stop":1756758960565,"duration":70},"status":"failed","statusMessage":"AssertionError: source_patients.date_of_birth → Invalid count: []\nsource_patients.date_of_birth → Invalid count: []\nsource_patients.date_of_birth → Invalid count: []\nsource_patients.date_of_birth → Invalid count: []\nsource_patients.date_of_birth → Invalid count: []\nsource_patients.date_of_birth → Invalid count: []\nsource_patients.date_of_birth → Invalid count: []\nsource_patients.date_of_birth → Invalid count: []\nsource_patients.date_of_birth → Invalid count: []","statusTrace":"config_loader = <utils.config_loader.ConfigLoader object at 0x0000022C5E2F7B60>\n\n    @pytest.mark.skipif(not should_run(\"date_field_validation\"), reason=\"Marked N in Excel\")\n    def test_Date_field_validation(config_loader):\n        validator = DateFieldValidation(config_loader)\n>       validator.run()\n\ntests\\test_smoke_suite.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.date_field_validation.DateFieldValidation object at 0x0000022C5E2F74D0>\ntables = ['source_doctors', 'source_doctors', 'source_doctors', 'source_doctors', 'source_doctors', 'source_doctors', ...]\nschema = 'dbo'\n\n    def run(self, tables=None, schema=\"dbo\"):\n        results = []\n    \n        failed_checks = []\n    \n        # ✅ If user didn't pass tables, fallback to Excel sheet (self.df)\n        if tables is None and \"table_name\" in self.df.columns:\n            tables = self.df[\"table_name\"].dropna().tolist()\n    \n        for table in tables:\n            date_columns = self.get_date_columns(table, schema)\n            if not date_columns:\n                logging.info(f\"ℹ No date columns found in {schema}.{table}\")\n                continue\n    \n            for col in date_columns:\n                query = f\"SELECT {col} FROM {schema}.{table}\"\n                values = [v[0] for v in self.db.execute_query(query) if v[0] is not None]\n                invalid_dates = [v for v in values if not self.validate_date(v)]\n    \n                results.append({\n                    \"Database\": self.db.database,\n                    \"Table\": f\"{schema}.{table}\",\n                    \"Column\": col,\n                    \"Invalid_Count\": len(invalid_dates),\n                    \"IsCheckPassed\": (len(invalid_dates) == 0)\n                })\n    \n                logging.info(f\"{schema}.{table}.{col} → Invalid Count: {len(invalid_dates)}\")\n    \n                if not invalid_dates:\n                    failed_checks.append(f\"{table}.{col} → Invalid count: {invalid_dates}\")\n    \n        # Save + print reports\n        self.report_helper.save_report(results, test_type=\"Date_Field_Check\")\n    \n        # ✅ Fail test only at the end (after report generation)\n>       assert not failed_checks, \"\\n\".join(failed_checks)\n               ^^^^^^^^^^^^^^^^^\nE       AssertionError: source_patients.date_of_birth → Invalid count: []\nE       source_patients.date_of_birth → Invalid count: []\nE       source_patients.date_of_birth → Invalid count: []\nE       source_patients.date_of_birth → Invalid count: []\nE       source_patients.date_of_birth → Invalid count: []\nE       source_patients.date_of_birth → Invalid count: []\nE       source_patients.date_of_birth → Invalid count: []\nE       source_patients.date_of_birth → Invalid count: []\nE       source_patients.date_of_birth → Invalid count: []\n\nsrc\\date_field_validation.py:101: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"config_loader","time":{"start":1756758960068,"stop":1756758960079,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: source_patients.date_of_birth → Invalid count: []\nsource_patients.date_of_birth → Invalid count: []\nsource_patients.date_of_birth → Invalid count: []\nsource_patients.date_of_birth → Invalid count: []\nsource_patients.date_of_birth → Invalid count: []\nsource_patients.date_of_birth → Invalid count: []\nsource_patients.date_of_birth → Invalid count: []\nsource_patients.date_of_birth → Invalid count: []\nsource_patients.date_of_birth → Invalid count: []","statusTrace":"config_loader = <utils.config_loader.ConfigLoader object at 0x0000022C5E2F7B60>\n\n    @pytest.mark.skipif(not should_run(\"date_field_validation\"), reason=\"Marked N in Excel\")\n    def test_Date_field_validation(config_loader):\n        validator = DateFieldValidation(config_loader)\n>       validator.run()\n\ntests\\test_smoke_suite.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.date_field_validation.DateFieldValidation object at 0x0000022C5E2F74D0>\ntables = ['source_doctors', 'source_doctors', 'source_doctors', 'source_doctors', 'source_doctors', 'source_doctors', ...]\nschema = 'dbo'\n\n    def run(self, tables=None, schema=\"dbo\"):\n        results = []\n    \n        failed_checks = []\n    \n        # ✅ If user didn't pass tables, fallback to Excel sheet (self.df)\n        if tables is None and \"table_name\" in self.df.columns:\n            tables = self.df[\"table_name\"].dropna().tolist()\n    \n        for table in tables:\n            date_columns = self.get_date_columns(table, schema)\n            if not date_columns:\n                logging.info(f\"ℹ No date columns found in {schema}.{table}\")\n                continue\n    \n            for col in date_columns:\n                query = f\"SELECT {col} FROM {schema}.{table}\"\n                values = [v[0] for v in self.db.execute_query(query) if v[0] is not None]\n                invalid_dates = [v for v in values if not self.validate_date(v)]\n    \n                results.append({\n                    \"Database\": self.db.database,\n                    \"Table\": f\"{schema}.{table}\",\n                    \"Column\": col,\n                    \"Invalid_Count\": len(invalid_dates),\n                    \"IsCheckPassed\": (len(invalid_dates) == 0)\n                })\n    \n                logging.info(f\"{schema}.{table}.{col} → Invalid Count: {len(invalid_dates)}\")\n    \n                if not invalid_dates:\n                    failed_checks.append(f\"{table}.{col} → Invalid count: {invalid_dates}\")\n    \n        # Save + print reports\n        self.report_helper.save_report(results, test_type=\"Date_Field_Check\")\n    \n        # ✅ Fail test only at the end (after report generation)\n>       assert not failed_checks, \"\\n\".join(failed_checks)\n               ^^^^^^^^^^^^^^^^^\nE       AssertionError: source_patients.date_of_birth → Invalid count: []\nE       source_patients.date_of_birth → Invalid count: []\nE       source_patients.date_of_birth → Invalid count: []\nE       source_patients.date_of_birth → Invalid count: []\nE       source_patients.date_of_birth → Invalid count: []\nE       source_patients.date_of_birth → Invalid count: []\nE       source_patients.date_of_birth → Invalid count: []\nE       source_patients.date_of_birth → Invalid count: []\nE       source_patients.date_of_birth → Invalid count: []\n\nsrc\\date_field_validation.py:101: AssertionError","steps":[],"attachments":[{"uid":"efd2094d409141ad","name":"stdout","source":"efd2094d409141ad.txt","type":"text/plain","size":91}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_smoke_suite"},{"name":"host","value":"INATS-LTP-066"},{"name":"thread","value":"37384-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_smoke_suite"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"469fca96f29fdaa3.json","parameterValues":[]}